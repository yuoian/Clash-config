
# 机场节点订阅
proxy-providers:
  #机场名
  示例01:

    url: ""
    type: http
    #订阅更新时间 单位秒
    interval: 86400
    #健康/延迟检测
    health-check: {enable: true,url: 'https://www.gstatic.com/generate_204',interval: 300}
    filter: "(?i)^((?!(过期|套餐|重置|流量|官网|落地|http)).)*$"
    #订阅更新时方式
    proxy: 直连 
  
  示例02:
    url: ""
    type: http
    interval: 86400
    health-check: {enable: true,url: 'https://www.gstatic.com/generate_204',interval: 300}
    filter: "(?i)^((?!(过期|套餐|重置|流量|官网|落地|http)).)*$"
    proxy: 直连 

# ==全局配置==
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
ipv6: true
#统一延迟和TCP并发
unified-delay: true
tcp-concurrent: true
#允许局域网
allow-lan: false
#全局 TLS 指纹
global-client-fingerprint: chrome
#规则代理 此项拥有默认值，默认为规则模式 
mode: rule
#ip节点缓存 记住选择的节点
profile:
  store-selected: true
  # 储存 API 对策略组的选择，以供下次启动时使用
  store-fake-ip: true
  # 储存 fakeip 映射表，域名再次发生连接时，使用原有映射地址  

# ==域名嗅探== 嗅探 消耗设备性能 用处不大
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  #强制嗅探
  force-domain:
    #- "+.v2ex.com"
  #忽略嗅探
  skip-domain:
    - "+.baidu.com"

# ==入站==   
tun:
  enable: true
  stack: mixed   # system/gvisor/mixed
  dns-hijack: ["any:53", "tcp://any:53"]
  auto-route: true
  #auto-redirect: true
  auto-detect-interface: true

# ==DNS设置==
dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: false
  respect-rules: true #dns 连接遵守路由规则，需配置 proxy-server-nameserver
  enhanced-mode: fake-ip # 模式切换 redir-host / fake-ip
  #fake-ip-range: 28.0.0.1/8  # 某些 DNS 不识别 198 段 / Android 出现 DNS 无返回	
  fake-ip-range: 198.18.0.0/15
  #模式切换 whitelist/blacklist , 默认blacklist
  #blacklist:如果匹配成功则不返回 fake-ip, whitelist即只有匹配成功才返回 fake-ip
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
    - "+.lan"
    - "+.local"
    - "+.msftconnecttest.com"
    - "+.msftncsi.com"
    - "localhost.ptlogin2.qq.com"
    - "time.*"
    - "api.weixin.qq.com" 
    - "+.apple.com"
    - "+.icloud.com"
    - "+.itunes.apple.com"
    - "connect.rom.miui.com" # 小米服务
    - "ntp.*"   # 时间服务器
  default-nameserver:
    - 223.5.5.5
    - 119.29.29.29
  proxy-server-nameserver:
    - https://cloudflare-dns.com/dns-query
    - https://dns.google/dns-query
    - https://223.5.5.5/dns-query
  # namesever尽量用运营商提供的DNS
  nameserver:
    - 223.5.5.5
    - 119.29.29.29

# 节点信息
proxies:
  - {name: 直连, type: direct}
  - {name: 拒绝, type: reject}

      
# 出站策略
#锚点 注意锚点必须放在引用的上方，可以集中把锚点全部放yaml的顶部
pr: &pr 
  {type: select, proxies: 
    [自动选择, 
     节点选择,
     全部节点,
     示例01,
     示例02,

     香港节点, 
     新加坡节点, 
     日本节点, 
     美国节点, 
     小众节点, 

     香港自动, 
     新加坡自动, 
     日本自动, 
     美国自动, 
     小众自动, 

     香港故转, 
     国内直连]}

# 策略组
proxy-groups:

  - name: 节点选择
    type: select
    icon: "https://img.icons8.com/?size=100&id=ooUU44cZMaFE&format=png&color=000000"
    proxies:
      - 自动选择
      - 全部节点
      - 示例01
      - 示例02
      - Emby

      - 香港节点
      - 新加坡节点
      - 日本节点
      - 美国节点
      - 小众节点

      - 香港自动
      - 新加坡自动
      - 日本自动
      - 美国自动
      - 小众自动

      - 香港故转
      - 国内直连

  - {name: 自动选择, type: url-test, include-all: true, tolerance: 70, interval: 300,filter: "^((?!(直连|拒绝)).)*$",icon: "https://raw.githubusercontent.com/Vbaethon/HOMOMIX/main/Icon/Color/Large/Auto_Link.png"}
  - {name: 全部节点, type: select, include-all: true, filter: "(?i)^(?!.*(直连|拒绝)).*",icon: "https://raw.githubusercontent.com/Vbaethon/HOMOMIX/main/Icon/Color/Large/Global.png"}
  - {name: 示例01, type: url-test, use: [示例01],filter: "^((?!(直连)).)*$",icon: "https://img.icons8.com/?size=100&id=2wKlpwIpI1cL&format=png&color=000000"} # 可选：排除包含特定关键词的节点
  - {name: 示例02, type: url-test, use: [示例02],filter: "^((?!(直连)).)*$",icon: "https://img.icons8.com/?size=100&id=21298&format=png&color=000000"}

  - {name: Emby, type: select, use: [示例02],filter: "(?i)^(?!.*(日本|日|jp|japan)).*",icon: "https://img.icons8.com/?size=100&id=FHnoYAFmyvu0&format=png&color=000000"}
  - {name: 国外媒体, <<: *pr , icon: "https://img.icons8.com/?size=100&id=F2R6V3ECtTmF&format=png&color=000000"}
  - {name: Google, <<: *pr ,icon: "https://img.icons8.com/?size=100&id=17949&format=png&color=000000"}
  - {name: Telegram, <<: *pr ,icon: "https://img.icons8.com/?size=100&id=63306&format=png&color=000000"}
  - {name: ChatGPT, <<: *pr , icon: "https://img.icons8.com/?size=100&id=FBO05Dys9QCg&format=png&color=000000"}
  - {name: Microsoft, <<: *pr ,icon: "https://img.icons8.com/?size=100&id=22989&format=png&color=000000"}
  - {name: PayPal, <<: *pr ,icon: "https://img.icons8.com/?size=100&id=13611&format=png&color=000000"}

  - {name: 香港节点, type: select, include-all: true, filter: "(?i)港|hk|hongkong|hong kong",icon: "https://img.icons8.com/?size=100&id=WQgynbTLjuXX&format=png&color=000000"}
  - {name: 新加坡节点, type: select, include-all: true, filter: "(?i)(新加坡|狮城|sg|singapore)",icon: "https://img.icons8.com/?size=100&id=8H-8FMObN4vB&format=png&color=000000"}
  - {name: 日本节点, type: select, include-all: true, filter: "(?i)日|jp|japan",icon: "https://img.icons8.com/?size=100&id=McQbrq9qaQye&format=png&color=000000"}
  - {name: 美国节点, type: select, include-all: true, filter: "(?i)美|美国|us|usa|unitedstates|united states|洛杉|俄亥俄",icon: "https://img.icons8.com/?size=100&id=aRiu1GGi6Aoe&format=png&color=000000"}   
  - {name: 小众节点, type: select, include-all: true, filter: "(?i)^(?!.*(直连|拒绝|港|hk|hongkong|hong kong|新加坡|sg|singapore|日|jp|japan|美|美国|us|usa|unitedstates|united states|洛杉|俄亥俄)).*",icon: "https://img.icons8.com/?size=100&id=44028&format=png&color=000000"}

  - {name: 香港自动, type: url-test, include-all: true, interval: 300, filter: "(?i)港|hk|hongkong|hong kong",icon: "https://img.icons8.com/?size=100&id=WQgynbTLjuXX&format=png&color=000000"}
  - {name: 新加坡自动, type: url-test, include-all: true, interval: 300, filter: "(?i)(新加坡|狮城|sg|singapore)",icon: "https://img.icons8.com/?size=100&id=8H-8FMObN4vB&format=png&color=000000"}
  - {name: 日本自动, type: url-test, include-all: true, interval: 300, filter: "(?i)日|jp|japan",icon: "https://img.icons8.com/?size=100&id=McQbrq9qaQye&format=png&color=000000"}
  - {name: 美国自动, type: url-test, include-all: true, interval: 300, filter: "(?i)美|美国|us|usa|unitedstates|united states|洛杉|俄亥俄",icon: "https://img.icons8.com/?size=100&id=aRiu1GGi6Aoe&format=png&color=000000"}   
  - {name: 小众自动, type: url-test, include-all: true, interval: 300, filter: "(?i)^(?!.*(直连|拒绝|港|hk|hongkong|hong kong|新加坡|sg|singapore|日|jp|japan|美|美国|us|usa|unitedstates|united states|洛杉|俄亥俄)).*",icon: "https://img.icons8.com/?size=100&id=44028&format=png&color=000000"}

  - {name: 香港故转, type: fallback, include-all: true, tolerance: 70, interval: 300, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$",icon: "https://img.icons8.com/?size=100&id=CVz99DmZNngE&format=png&color=000000"}
  - {name: Adblock, type: select, proxies: [拒绝,直连],icon: "https://raw.githubusercontent.com/Vbaethon/HOMOMIX/main/Icon/Color/Large/AdblockPlus_2.png"}
  - {name: 国内媒体, type: select, proxies: [直连,拒绝],icon: "https://img.icons8.com/?size=100&id=d5TXEddDPJaA&format=png&color=000000"}
  - {name: 国内直连, type: select, proxies: [直连,拒绝],icon: "https://raw.githubusercontent.com/Vbaethon/HOMOMIX/main/Icon/Color/Large/DIRECT.png"}
  - {name: 漏网之鱼, <<: *pr ,icon: "https://testingcf.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Final.png"}
      
# 规则匹配
rules:
  # 内网直连
  - RULE-SET,private_domain, 直连

  # 广告拦截
  - RULE-SET,adblock_domain,Adblock

  # 特定服务域名（需精确代理的服务优先于通用规则）
  - RULE-SET,ai,ChatGPT
  - RULE-SET,github_domain,节点选择
  - RULE-SET,youtube_domain,国外媒体
  - RULE-SET,google_domain,Google
  - RULE-SET,microsoft_domain,Microsoft
  - RULE-SET,tiktok_domain,国外媒体
  - RULE-SET,telegram_domain,Telegram
  - RULE-SET,netflix_domain,国外媒体
  - RULE-SET,paypal_domain,PayPal

  # Emby等端口优先识别
  # - DST-PORT,443/8096,Emby,no-resolve
  - DOMAIN-KEYWORD,emby,Emby
  - DOMAIN-SUFFIX,xxx.xx,Emby



  # 通用代理域名（放在靠后避免覆盖特殊服务）和 GFW域名（兜底代理）
  - RULE-SET,proxylite,节点选择
  - RULE-SET,gfw_domain,节点选择

  # 国内域名直连（在代理规则后，避免国内服务被代理）
  - RULE-SET,china_media,国内媒体
  - RULE-SET,cn_domain,直连

  # 特定服务IP（需代理的IP规则）
  - RULE-SET,google_ip,Google,no-resolve
  - RULE-SET,netflix_ip,国外媒体,no-resolve
  - RULE-SET,telegram_ip,Telegram,no-resolve

  # 国内IP直连（确保国内IP不被代理）
  - RULE-SET,cn_ip,直连

  # 非国内IP代理（在直连规则后）
  - RULE-SET,geolocation-!cn,节点选择

  # 最终兜底策略（必须最后）
  - MATCH,漏网之鱼

# 规则集
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}

rule-providers: 
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
  proxylite: { <<: *class, url: "https://raw.githubusercontent.com/qichiyuhub/rule/refs/heads/main/proxy.list"}
  ai: {  <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ai-!cn.mrs" }

  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"}
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"}
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"}
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"}
  tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"}
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"}
  netflix_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs"}
  paypal_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs"}
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs"}
  #中国大陆的防火墙屏蔽的网站
  gfw_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs"}
  #指除中国大陆以外的其他国家和地区
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"}
  china_media: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/category-media-cn.mrs" }

  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"}
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"}
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"}
  netflix_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs"}
  
  #广告
 # adblock_domain: { <<: *domain, url: "https://raw.githubusercontent.com/REIJI007/AdBlock_Rule_For_Clash/main/adblock_reject.mrs"}
  adblock_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/category-ads-all.mrs"}
